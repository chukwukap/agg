/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { AGGREGATOR_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getSwapLegDecoder,
  getSwapLegEncoder,
  type SwapLeg,
  type SwapLegArgs,
} from '../types';

export const ROUTE_DISCRIMINATOR = new Uint8Array([
  229, 23, 203, 151, 122, 227, 173, 42,
]);

export function getRouteDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ROUTE_DISCRIMINATOR);
}

export type RouteInstruction<
  TProgram extends string = typeof AGGREGATOR_PROGRAM_ADDRESS,
  TAccountUserAuthority extends string | AccountMeta<string> = string,
  TAccountUserSource extends string | AccountMeta<string> = string,
  TAccountUserDestination extends string | AccountMeta<string> = string,
  TAccountFeeVault extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUserAuthority extends string
        ? ReadonlySignerAccount<TAccountUserAuthority> &
            AccountSignerMeta<TAccountUserAuthority>
        : TAccountUserAuthority,
      TAccountUserSource extends string
        ? WritableAccount<TAccountUserSource>
        : TAccountUserSource,
      TAccountUserDestination extends string
        ? WritableAccount<TAccountUserDestination>
        : TAccountUserDestination,
      TAccountFeeVault extends string
        ? WritableAccount<TAccountFeeVault>
        : TAccountFeeVault,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RouteInstructionData = {
  discriminator: ReadonlyUint8Array;
  legs: Array<SwapLeg>;
  userMaxIn: bigint;
  userMinOut: bigint;
};

export type RouteInstructionDataArgs = {
  legs: Array<SwapLegArgs>;
  userMaxIn: number | bigint;
  userMinOut: number | bigint;
};

export function getRouteInstructionDataEncoder(): Encoder<RouteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['legs', getArrayEncoder(getSwapLegEncoder())],
      ['userMaxIn', getU64Encoder()],
      ['userMinOut', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ROUTE_DISCRIMINATOR })
  );
}

export function getRouteInstructionDataDecoder(): Decoder<RouteInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['legs', getArrayDecoder(getSwapLegDecoder())],
    ['userMaxIn', getU64Decoder()],
    ['userMinOut', getU64Decoder()],
  ]);
}

export function getRouteInstructionDataCodec(): Codec<
  RouteInstructionDataArgs,
  RouteInstructionData
> {
  return combineCodec(
    getRouteInstructionDataEncoder(),
    getRouteInstructionDataDecoder()
  );
}

export type RouteAsyncInput<
  TAccountUserAuthority extends string = string,
  TAccountUserSource extends string = string,
  TAccountUserDestination extends string = string,
  TAccountFeeVault extends string = string,
  TAccountConfig extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  userAuthority: TransactionSigner<TAccountUserAuthority>;
  userSource: Address<TAccountUserSource>;
  userDestination: Address<TAccountUserDestination>;
  feeVault: Address<TAccountFeeVault>;
  /** Global protocol config */
  config?: Address<TAccountConfig>;
  tokenProgram?: Address<TAccountTokenProgram>;
  legs: RouteInstructionDataArgs['legs'];
  userMaxIn: RouteInstructionDataArgs['userMaxIn'];
  userMinOut: RouteInstructionDataArgs['userMinOut'];
};

export async function getRouteInstructionAsync<
  TAccountUserAuthority extends string,
  TAccountUserSource extends string,
  TAccountUserDestination extends string,
  TAccountFeeVault extends string,
  TAccountConfig extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AGGREGATOR_PROGRAM_ADDRESS,
>(
  input: RouteAsyncInput<
    TAccountUserAuthority,
    TAccountUserSource,
    TAccountUserDestination,
    TAccountFeeVault,
    TAccountConfig,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RouteInstruction<
    TProgramAddress,
    TAccountUserAuthority,
    TAccountUserSource,
    TAccountUserDestination,
    TAccountFeeVault,
    TAccountConfig,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? AGGREGATOR_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    userAuthority: { value: input.userAuthority ?? null, isWritable: false },
    userSource: { value: input.userSource ?? null, isWritable: true },
    userDestination: { value: input.userDestination ?? null, isWritable: true },
    feeVault: { value: input.feeVault ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.userAuthority),
      getAccountMeta(accounts.userSource),
      getAccountMeta(accounts.userDestination),
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getRouteInstructionDataEncoder().encode(
      args as RouteInstructionDataArgs
    ),
  } as RouteInstruction<
    TProgramAddress,
    TAccountUserAuthority,
    TAccountUserSource,
    TAccountUserDestination,
    TAccountFeeVault,
    TAccountConfig,
    TAccountTokenProgram
  >;

  return instruction;
}

export type RouteInput<
  TAccountUserAuthority extends string = string,
  TAccountUserSource extends string = string,
  TAccountUserDestination extends string = string,
  TAccountFeeVault extends string = string,
  TAccountConfig extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  userAuthority: TransactionSigner<TAccountUserAuthority>;
  userSource: Address<TAccountUserSource>;
  userDestination: Address<TAccountUserDestination>;
  feeVault: Address<TAccountFeeVault>;
  /** Global protocol config */
  config: Address<TAccountConfig>;
  tokenProgram?: Address<TAccountTokenProgram>;
  legs: RouteInstructionDataArgs['legs'];
  userMaxIn: RouteInstructionDataArgs['userMaxIn'];
  userMinOut: RouteInstructionDataArgs['userMinOut'];
};

export function getRouteInstruction<
  TAccountUserAuthority extends string,
  TAccountUserSource extends string,
  TAccountUserDestination extends string,
  TAccountFeeVault extends string,
  TAccountConfig extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AGGREGATOR_PROGRAM_ADDRESS,
>(
  input: RouteInput<
    TAccountUserAuthority,
    TAccountUserSource,
    TAccountUserDestination,
    TAccountFeeVault,
    TAccountConfig,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RouteInstruction<
  TProgramAddress,
  TAccountUserAuthority,
  TAccountUserSource,
  TAccountUserDestination,
  TAccountFeeVault,
  TAccountConfig,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AGGREGATOR_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    userAuthority: { value: input.userAuthority ?? null, isWritable: false },
    userSource: { value: input.userSource ?? null, isWritable: true },
    userDestination: { value: input.userDestination ?? null, isWritable: true },
    feeVault: { value: input.feeVault ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.userAuthority),
      getAccountMeta(accounts.userSource),
      getAccountMeta(accounts.userDestination),
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getRouteInstructionDataEncoder().encode(
      args as RouteInstructionDataArgs
    ),
  } as RouteInstruction<
    TProgramAddress,
    TAccountUserAuthority,
    TAccountUserSource,
    TAccountUserDestination,
    TAccountFeeVault,
    TAccountConfig,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedRouteInstruction<
  TProgram extends string = typeof AGGREGATOR_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    userAuthority: TAccountMetas[0];
    userSource: TAccountMetas[1];
    userDestination: TAccountMetas[2];
    feeVault: TAccountMetas[3];
    /** Global protocol config */
    config: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
  };
  data: RouteInstructionData;
};

export function parseRouteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRouteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      userAuthority: getNextAccount(),
      userSource: getNextAccount(),
      userDestination: getNextAccount(),
      feeVault: getNextAccount(),
      config: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getRouteInstructionDataDecoder().decode(instruction.data),
  };
}
