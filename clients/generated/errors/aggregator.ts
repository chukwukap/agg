/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { AGGREGATOR_PROGRAM_ADDRESS } from '../programs';

/** TooManyTokensSpent: Too many tokens spent vs user_max_in */
export const AGGREGATOR_ERROR__TOO_MANY_TOKENS_SPENT = 0x1770; // 6000
/** SlippageExceeded: Not enough output (slippage) */
export const AGGREGATOR_ERROR__SLIPPAGE_EXCEEDED = 0x1771; // 6001
/** UnknownDex: Unknown DEX id */
export const AGGREGATOR_ERROR__UNKNOWN_DEX = 0x1772; // 6002
/** RemainingAccountsMismatch: Insufficient remaining accounts for adapter */
export const AGGREGATOR_ERROR__REMAINING_ACCOUNTS_MISMATCH = 0x1773; // 6003
/** FeeVaultMintMismatch: Fee vault mint does not match output mint */
export const AGGREGATOR_ERROR__FEE_VAULT_MINT_MISMATCH = 0x1774; // 6004
/** InvalidProgramId: Invalid program id */
export const AGGREGATOR_ERROR__INVALID_PROGRAM_ID = 0x1775; // 6005
/** Paused: Protocol is paused */
export const AGGREGATOR_ERROR__PAUSED = 0x1776; // 6006
/** Unauthorized: Unauthorized: admin signature required */
export const AGGREGATOR_ERROR__UNAUTHORIZED = 0x1777; // 6007
/** MintMismatch: Mint continuity mismatch between swap legs or accounts */
export const AGGREGATOR_ERROR__MINT_MISMATCH = 0x1778; // 6008
/** NoLegs: Route must contain at least one leg */
export const AGGREGATOR_ERROR__NO_LEGS = 0x1779; // 6009
/** FeeVaultOwnerMismatch: Fee vault owner does not match admin */
export const AGGREGATOR_ERROR__FEE_VAULT_OWNER_MISMATCH = 0x177a; // 6010
/** InvalidFeeBps: Invalid fee basis points (must be 0-10000) */
export const AGGREGATOR_ERROR__INVALID_FEE_BPS = 0x177b; // 6011
/** TooManyLegs: Too many legs in route */
export const AGGREGATOR_ERROR__TOO_MANY_LEGS = 0x177c; // 6012
/** NumericalOverflow: Numerical overflow */
export const AGGREGATOR_ERROR__NUMERICAL_OVERFLOW = 0x177d; // 6013

export type AggregatorError =
  | typeof AGGREGATOR_ERROR__FEE_VAULT_MINT_MISMATCH
  | typeof AGGREGATOR_ERROR__FEE_VAULT_OWNER_MISMATCH
  | typeof AGGREGATOR_ERROR__INVALID_FEE_BPS
  | typeof AGGREGATOR_ERROR__INVALID_PROGRAM_ID
  | typeof AGGREGATOR_ERROR__MINT_MISMATCH
  | typeof AGGREGATOR_ERROR__NO_LEGS
  | typeof AGGREGATOR_ERROR__NUMERICAL_OVERFLOW
  | typeof AGGREGATOR_ERROR__PAUSED
  | typeof AGGREGATOR_ERROR__REMAINING_ACCOUNTS_MISMATCH
  | typeof AGGREGATOR_ERROR__SLIPPAGE_EXCEEDED
  | typeof AGGREGATOR_ERROR__TOO_MANY_LEGS
  | typeof AGGREGATOR_ERROR__TOO_MANY_TOKENS_SPENT
  | typeof AGGREGATOR_ERROR__UNAUTHORIZED
  | typeof AGGREGATOR_ERROR__UNKNOWN_DEX;

let aggregatorErrorMessages: Record<AggregatorError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  aggregatorErrorMessages = {
    [AGGREGATOR_ERROR__FEE_VAULT_MINT_MISMATCH]: `Fee vault mint does not match output mint`,
    [AGGREGATOR_ERROR__FEE_VAULT_OWNER_MISMATCH]: `Fee vault owner does not match admin`,
    [AGGREGATOR_ERROR__INVALID_FEE_BPS]: `Invalid fee basis points (must be 0-10000)`,
    [AGGREGATOR_ERROR__INVALID_PROGRAM_ID]: `Invalid program id`,
    [AGGREGATOR_ERROR__MINT_MISMATCH]: `Mint continuity mismatch between swap legs or accounts`,
    [AGGREGATOR_ERROR__NO_LEGS]: `Route must contain at least one leg`,
    [AGGREGATOR_ERROR__NUMERICAL_OVERFLOW]: `Numerical overflow`,
    [AGGREGATOR_ERROR__PAUSED]: `Protocol is paused`,
    [AGGREGATOR_ERROR__REMAINING_ACCOUNTS_MISMATCH]: `Insufficient remaining accounts for adapter`,
    [AGGREGATOR_ERROR__SLIPPAGE_EXCEEDED]: `Not enough output (slippage)`,
    [AGGREGATOR_ERROR__TOO_MANY_LEGS]: `Too many legs in route`,
    [AGGREGATOR_ERROR__TOO_MANY_TOKENS_SPENT]: `Too many tokens spent vs user_max_in`,
    [AGGREGATOR_ERROR__UNAUTHORIZED]: `Unauthorized: admin signature required`,
    [AGGREGATOR_ERROR__UNKNOWN_DEX]: `Unknown DEX id`,
  };
}

export function getAggregatorErrorMessage(code: AggregatorError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (aggregatorErrorMessages as Record<AggregatorError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isAggregatorError<TProgramErrorCode extends AggregatorError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    AGGREGATOR_PROGRAM_ADDRESS,
    code
  );
}
