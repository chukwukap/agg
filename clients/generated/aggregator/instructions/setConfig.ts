/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { AGGREGATOR_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_CONFIG_DISCRIMINATOR = new Uint8Array([
  108, 158, 154, 175, 212, 98, 52, 66,
]);

export function getSetConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SET_CONFIG_DISCRIMINATOR);
}

export type SetConfigInstruction<
  TProgram extends string = typeof AGGREGATOR_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type SetConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  feeBps: number;
};

export type SetConfigInstructionDataArgs = { feeBps: number };

export function getSetConfigInstructionDataEncoder(): FixedSizeEncoder<SetConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['feeBps', getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_CONFIG_DISCRIMINATOR })
  );
}

export function getSetConfigInstructionDataDecoder(): FixedSizeDecoder<SetConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['feeBps', getU16Decoder()],
  ]);
}

export function getSetConfigInstructionDataCodec(): FixedSizeCodec<
  SetConfigInstructionDataArgs,
  SetConfigInstructionData
> {
  return combineCodec(
    getSetConfigInstructionDataEncoder(),
    getSetConfigInstructionDataDecoder()
  );
}

export type SetConfigAsyncInput<
  TAccountConfig extends string = string,
  TAccountAdmin extends string = string,
> = {
  config?: Address<TAccountConfig>;
  admin: TransactionSigner<TAccountAdmin>;
  feeBps: SetConfigInstructionDataArgs['feeBps'];
};

export async function getSetConfigInstructionAsync<
  TAccountConfig extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof AGGREGATOR_PROGRAM_ADDRESS,
>(
  input: SetConfigAsyncInput<TAccountConfig, TAccountAdmin>,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SetConfigInstruction<TProgramAddress, TAccountConfig, TAccountAdmin>
> {
  // Program address.
  const programAddress = config?.programAddress ?? AGGREGATOR_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.config), getAccountMeta(accounts.admin)],
    programAddress,
    data: getSetConfigInstructionDataEncoder().encode(
      args as SetConfigInstructionDataArgs
    ),
  } as SetConfigInstruction<TProgramAddress, TAccountConfig, TAccountAdmin>;

  return instruction;
}

export type SetConfigInput<
  TAccountConfig extends string = string,
  TAccountAdmin extends string = string,
> = {
  config: Address<TAccountConfig>;
  admin: TransactionSigner<TAccountAdmin>;
  feeBps: SetConfigInstructionDataArgs['feeBps'];
};

export function getSetConfigInstruction<
  TAccountConfig extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof AGGREGATOR_PROGRAM_ADDRESS,
>(
  input: SetConfigInput<TAccountConfig, TAccountAdmin>,
  config?: { programAddress?: TProgramAddress }
): SetConfigInstruction<TProgramAddress, TAccountConfig, TAccountAdmin> {
  // Program address.
  const programAddress = config?.programAddress ?? AGGREGATOR_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.config), getAccountMeta(accounts.admin)],
    programAddress,
    data: getSetConfigInstructionDataEncoder().encode(
      args as SetConfigInstructionDataArgs
    ),
  } as SetConfigInstruction<TProgramAddress, TAccountConfig, TAccountAdmin>;

  return instruction;
}

export type ParsedSetConfigInstruction<
  TProgram extends string = typeof AGGREGATOR_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    admin: TAccountMetas[1];
  };
  data: SetConfigInstructionData;
};

export function parseSetConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getSetConfigInstructionDataDecoder().decode(instruction.data),
  };
}
