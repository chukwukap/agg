/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getDexIdDecoder,
  getDexIdEncoder,
  type DexId,
  type DexIdArgs,
} from '.';

/**
 * Describes a single CPI leg into a downstream AMM.
 *
 * The router will forward `account_count` accounts from `ctx.remaining_accounts`
 * to the selected adapter based on `dex_id`. The adapter will then invoke the
 * AMM program with `data` as the raw instruction payload.
 */

export type SwapLeg = {
  /** Target DEX adapter. */
  dexId: DexId;
  /** Intended input amount for this leg (hint; actual spent is computed post-swap). */
  inAmount: bigint;
  /** Intended minimum output for this leg (hint; final slippage check is applied on net output after fees). */
  minOut: bigint;
  /** Number of `AccountInfo`s to consume from `remaining_accounts` for this leg. */
  accountCount: number;
  /** Raw instruction bytes for the AMM call (Anchor discriminator + Borsh-encoded args for that AMM instruction). */
  data: ReadonlyUint8Array;
  /** Expected input SPL mint for this leg (continuity-checked by router). */
  inMint: Address;
  /** Expected output SPL mint for this leg (continuity-checked by router). */
  outMint: Address;
};

export type SwapLegArgs = {
  /** Target DEX adapter. */
  dexId: DexIdArgs;
  /** Intended input amount for this leg (hint; actual spent is computed post-swap). */
  inAmount: number | bigint;
  /** Intended minimum output for this leg (hint; final slippage check is applied on net output after fees). */
  minOut: number | bigint;
  /** Number of `AccountInfo`s to consume from `remaining_accounts` for this leg. */
  accountCount: number;
  /** Raw instruction bytes for the AMM call (Anchor discriminator + Borsh-encoded args for that AMM instruction). */
  data: ReadonlyUint8Array;
  /** Expected input SPL mint for this leg (continuity-checked by router). */
  inMint: Address;
  /** Expected output SPL mint for this leg (continuity-checked by router). */
  outMint: Address;
};

export function getSwapLegEncoder(): Encoder<SwapLegArgs> {
  return getStructEncoder([
    ['dexId', getDexIdEncoder()],
    ['inAmount', getU64Encoder()],
    ['minOut', getU64Encoder()],
    ['accountCount', getU8Encoder()],
    ['data', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ['inMint', getAddressEncoder()],
    ['outMint', getAddressEncoder()],
  ]);
}

export function getSwapLegDecoder(): Decoder<SwapLeg> {
  return getStructDecoder([
    ['dexId', getDexIdDecoder()],
    ['inAmount', getU64Decoder()],
    ['minOut', getU64Decoder()],
    ['accountCount', getU8Decoder()],
    ['data', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['inMint', getAddressDecoder()],
    ['outMint', getAddressDecoder()],
  ]);
}

export function getSwapLegCodec(): Codec<SwapLegArgs, SwapLeg> {
  return combineCodec(getSwapLegEncoder(), getSwapLegDecoder());
}
